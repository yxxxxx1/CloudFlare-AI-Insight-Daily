name: Auto Build AI Daily

on:
  workflow_dispatch: {}
  schedule:
    - cron: "10 0 * * *" # Âåó‰∫¨Êó∂Èó¥ 08:10

jobs:
  auto-daily:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run end-to-end pipeline (login ‚Üí writeData ‚Üí genAI ‚Üí commit ‚Üí writeRssData ‚Üí rss)
        env:
          BASE_URL: ${{ vars.WORKER_BASE_URL }}
          USERNAME: ${{ secrets.WORKER_LOGIN_USERNAME }}
          PASSWORD: ${{ secrets.WORKER_LOGIN_PASSWORD }}
          MAX_PER_TYPE: "6"
          TZ: Asia/Shanghai
        run: |
          node - <<'EOF'
          const BASE = process.env.BASE_URL.replace(/\/+$/, '');
          const DATE = new Date(Date.now() + 8*3600*1000).toISOString().slice(0,10);
          const MAX_PER_TYPE = Number(process.env.MAX_PER_TYPE || 6);

          let cookieJar = '';
          const keepCookie = (res) => {
            const set = res.headers.get('set-cookie');
            if (set) {
              const one = set.split(',')[0];
              const m = one.match(/^[^;]+/);
              if (m) cookieJar = cookieJar ? (cookieJar + '; ' + m[0]) : m[0];
            }
          };
          const fetchWithCookie = async (url, opts={}) => {
            const headers = Object.assign({}, opts.headers || {});
            if (cookieJar) headers['cookie'] = cookieJar;
            const res = await fetch(url, {...opts, headers});
            keepCookie(res);
            return res;
          };
          const ok = (res) => { if (!res.ok) throw new Error(`HTTP ${res.status}`); };
          const form = (pairs) => { const f = new FormData(); for (const [k,v] of pairs) f.append(k,v); return f; };

          console.log(`BASE: ${BASE}`);
          console.log(`DATE: ${DATE}`);

          // Login
          console.log('üîê Login ...');
          const fd = new URLSearchParams();
          fd.set('username', process.env.USERNAME);
          fd.set('password', process.env.PASSWORD);
          const loginRes = await fetch(`${BASE}/login`, {method:'POST', headers:{'content-type':'application/x-www-form-urlencoded'}, body:fd});
          if (![200,302].includes(loginRes.status)) throw new Error('Login failed');
          keepCookie(loginRes);
          console.log('‚úÖ Login OK');

          // Write data
          console.log('üìù writeData ...');
          const wres = await fetchWithCookie(`${BASE}/writeData`, {method:'POST', headers:{'content-type':'application/json'}, body:JSON.stringify({})});
          ok(wres);
          console.log('writeData result:', await wres.json());

          // Get content
          console.log('üì• getContent ...');
          const cres = await fetchWithCookie(`${BASE}/getContent?date=${DATE}`);
          ok(cres);
          const content = await cres.json();
          const categories = Object.entries(content).filter(([k,v]) => Array.isArray(v));
          console.log('got categories:', categories.map(([k])=>k));

          const selectedItems = [];
          for (const [type, arr] of categories) {
            for (const it of (arr || []).slice(0, MAX_PER_TYPE)) {
              if (it && it.id != null) selectedItems.push(`${type}:${it.id}`);
            }
          }
          if (!selectedItems.length) throw new Error('No items to select');

          // genAIContent (Âéü‰ΩúËÄÖ formData Ê®°Âºè)
          console.log('ü§ñ genAIContent (form-data mode)...');
          const fdAI = form([
            ['date', DATE],
            ...selectedItems.map(v => ['selectedItems', v])
          ]);
          const gres = await fetchWithCookie(`${BASE}/genAIContent`, {method:'POST', body:fdAI});
          ok(gres);
          const html = await gres.text();
          const m = html.match(/<textarea[^>]*name=["']daily_summary_markdown["'][^>]*>([\s\S]*?)<\/textarea>/i);
          if (!m) throw new Error('Cannot find daily_summary_markdown textarea in HTML.');
          const markdown = m[1]
            .replace(/&lt;/g,'<')
            .replace(/&gt;/g,'>')
            .replace(/&amp;/g,'&');
          console.log(`‚úÖ genAIContent OK (length=${markdown.length})`);

          // Commit to GitHub
          console.log('‚¨ÜÔ∏è commitToGitHub ...');
          const fdCommit = form([['date', DATE], ['daily_summary_markdown', markdown]]);
          const commitRes = await fetchWithCookie(`${BASE}/commitToGitHub`, {method:'POST', body:fdCommit});
          ok(commitRes);
          console.log('commitToGitHub result:', await commitRes.json());

          // Write RSS
          console.log('ü™Ñ writeRssData ...');
          const rssRes = await fetchWithCookie(`${BASE}/writeRssData?date=${DATE}`);
          ok(rssRes);
          console.log('writeRssData result:', (await rssRes.json()).title || 'OK');

          // Download RSS
          console.log('‚¨áÔ∏è download RSS ...');
          const rssFile = await fetchWithCookie(`${BASE}/rss?days=7`);
          ok(rssFile);
          const xml = await rssFile.text();
          const fs = await import('node:fs/promises');
          await fs.writeFile('rss.xml', xml, 'utf8');
          console.log('üéâ All done for', DATE);
          EOF

      - name: Prepare files for GitHub Pages
        run: |
          mkdir -p docs/daily
          cp -r daily/* docs/daily/ || true
          cp rss.xml docs/rss.xml || true
          echo "<meta http-equiv='refresh' content='0; url=daily/$(date +%F).md'>" > docs/index.html

      - name: Commit and push changes (rss + pages)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add rss.xml || true
          git add docs/ || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "docs: auto-build AI Daily ($(date -u))"
            git pull --rebase origin main
            git push origin main
          fi


