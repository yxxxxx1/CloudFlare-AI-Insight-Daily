name: Build Daily Journal

on:
  # 每天UTC时间0点自动触发 (对应北京时间早上8点)
  schedule:
    - cron: '0 23 * * *'
    
  # 手动触发
  workflow_dispatch:
  
jobs:
  build-book:
    runs-on: ubuntu-latest
      
    # 需要写入权限来提交生成的文件和归档的日刊
    permissions:
      contents: write # 用于提交代码变更
      pages: write      # 新增：允许部署到 GitHub Pages
      id-token: write   # 新增：允许 Actions 获取部署所需的令牌

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 明确指定要检出的分支
          ref: 'main' # <-- 请将 'book' 替换为你的目标分支名

      - name: Archive old notes
        id: archive
        run: |
          echo "开始检查并归档旧的日刊..."
          # 查找最新文件以确定当前月份
          LATEST_DAILY_FILE=$(find daily -type f -name "*.md" | sort -r | head -n 1)
          if [ -z "$LATEST_DAILY_FILE" ]; then
            echo "在 'daily' 目录中没有找到任何 .md 文件，跳过归档步骤。"
            exit 0
          fi
          
          LATEST_MONTH=$(basename "$LATEST_DAILY_FILE" .md | cut -d'-' -f1,2)
          echo "当前最新月份是: $LATEST_MONTH"

          # 仅遍历 daily/ 根目录下的 md 文件进行归档
          for file in daily/*.md; do
            # 如果根目录下没有md文件，循环会匹配到 "daily/*.md" 字符串，需要跳过
            [ -e "$file" ] || continue
            
            FILE_MONTH=$(basename "$file" .md | cut -d'-' -f1,2)
            
            if [ "$FILE_MONTH" != "$LATEST_MONTH" ]; then
              TARGET_DIR="daily/$FILE_MONTH"
              mkdir -p "$TARGET_DIR"
              echo "归档文件: $file -> $TARGET_DIR/"
              mv "$file" "$TARGET_DIR/"
            fi
          done
          echo "文件归档检查完成。"

      # ...紧跟在 "Archive old notes" 步骤之后

      - name: Build the book
        run: |
          # 下载并安装 mdbook 工具
          mkdir mdbook
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.21/mdbook-v0.4.21-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook
          echo "$PWD/mdbook" >> $GITHUB_PATH
          
          # 运行构建命令
          # 它会读取 book.toml 和 src/ 目录下的文件，并将生成的 HTML 网站放入 ./book 目录
          mdbook build

      # ...紧跟在 "Build the book" 步骤之后

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 上传由 mdbook build 命令生成的 "book" 目录
          path: ./book
          
      - name: Trigger RSS Data Write (2 attempts, 3 retries each)
        run: |
          # 检查 `WRITE_RSS_URL` 变量是否已设置
          if [ -z "${{ vars.WRITE_RSS_URL }}" ]; then
            echo "警告: WRITE_RSS_URL 仓库变量未设置或为空，跳过此步骤。"
            exit 0
          fi

          # 设置时区为 Asia/Shanghai (东八区)，并获取 YYYY-MM-DD 格式的日期
          TODAY_DATE=$(TZ="Asia/Shanghai" date +%Y-%m-%d)
          FULL_URL="${{ vars.WRITE_RSS_URL }}?date=$TODAY_DATE"
          
          echo "将向以下 URL 发送2次请求（每次请求若失败则重试3次）:"
          echo "$FULL_URL"
          
          # 循环两次，发送两次独立的请求
          for i in 1 2
          do
            echo "---"
            echo "正在发送第 $i 次请求..."
            
            # 使用 curl 发起请求，并配置重试逻辑
            # -f: 在遇到服务器HTTP错误时，以错误码退出（对CI/CD很重要）
            # -sS: 静默模式，但仍然显示错误信息
            # --retry 3: 如果命令失败，则最多重试3次
            # --retry-delay 5: 每次重试之间等待5秒
            # --retry-connrefused: 在“连接被拒绝”时也进行重试，增强网络抖动的鲁棒性
            if curl -fsS --retry 3 --retry-delay 5 --retry-connrefused "$FULL_URL"; then
              echo "第 $i 次请求成功。"
            else
              echo "错误：第 $i 次请求在3次重试后仍然失败。"
              # 使整个步骤失败
              exit 1
            fi
          done
          
          echo "---"
          echo "两次请求均已成功发送。"
          
      - name: Download RSS Feed
        run: |
          if [ -z "${{ vars.RSS_FEED_URL }}" ]; then
            echo "警告: RSS_FEED_URL 仓库变量未设置或为空，跳过下载。"
          else
            echo "正在从 ${{ vars.RSS_FEED_URL }} 下载 RSS Feed..."
            if wget -O rss.xml "${{ vars.RSS_FEED_URL }}" --timeout=30 --tries=3; then
              echo "RSS Feed 已成功下载到 rss.xml"
            else
              echo "错误: 下载 RSS Feed 失败。wget 返回错误码 $?。"
            fi
          fi
          
  
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
            if [ -d "daily/" ]; then
          git add daily/
            fi
          if [ -f "rss.xml" ]; then
          git add rss.xml
            fi
          if git diff --staged --quiet; then
          echo "没有文件变更，无需提交。"
          else
          echo "检测到文件变更，正在提交..."
          git commit -m "docs: 自动构建日刊并归档旧月份 (`date -u`)"
          git push
          fi

      # 新增一个专门用于部署的任务
  deploy:
    # 部署任务需要等待构建任务成功完成
    needs: build-book
    runs-on: ubuntu-latest
    
    # 定义部署环境（这是 GitHub Pages 的标准配置）
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
