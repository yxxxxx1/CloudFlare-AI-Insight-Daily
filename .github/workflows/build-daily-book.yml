name: Build and Deploy Daily Journal

on:
  schedule:
    - cron: '0 23 * * *'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main' 

      - name: Archive old notes
        run: |
          echo "开始检查并归档旧的日刊..."
          mkdir -p src/daily
          LATEST_DAILY_FILE=$(find src/daily -type f -name "*.md" | sort -r | head -n 1)
          if [ -z "$LATEST_DAILY_FILE" ]; then
            echo "在 'src/daily' 目录中没有找到任何 .md 文件，跳过归档步骤。"
          else
            LATEST_MONTH=$(basename "$LATEST_DAILY_FILE" .md | cut -d'-' -f1,2)
            echo "当前最新月份是: $LATEST_MONTH"
            for file in src/daily/*.md; do
              [ -e "$file" ] || continue
              FILE_MONTH=$(basename "$file" .md | cut -d'-' -f1,2)
              if [ "$FILE_MONTH" != "$LATEST_MONTH" ]; then
                TARGET_DIR="src/daily/$FILE_MONTH"
                mkdir -p "$TARGET_DIR"
                echo "归档文件: $file -> $TARGET_DIR/"
                mv "$file" "$TARGET_DIR/"
              fi
            done
          fi
          echo "文件归档检查完成。"

      # 【已修复】恢复了“触发”脚本
      - name: Trigger RSS Data Write (2 attempts, 3 retries each)
        run: |
          if [ -z "${{ vars.WRITE_RSS_URL }}" ]; then
            echo "错误：WRITE_RSS_URL 变量未设置！"
            exit 1
          fi

          # 注意：我们不再需要 ?date=... 参数，因为 writeData.js 会自动获取日期
          FULL_URL="${{ vars.WRITE_RSS_URL }}"

          echo "将向以下 URL 发送2次 POST 请求（每次请求若失败则重试3次）:"
          echo "$FULL_URL"

          for i in 1 2
          do
            echo "---"
            echo "正在发送第 $i 次 POST 请求..."

            # ▼▼▼ 这是修改的核心 ▼▼▼
            # 使用 -X POST 发送POST请求
            # 使用 -H 'Content-Type: application/json'
            # 使用 -d '{}' 发送一个空的JSON体，以确保是有效的POST请求
            if curl -fsS -X POST -H "Content-Type: application/json" -d "{}" \
                 --retry 3 --retry-delay 5 --retry-connrefused "$FULL_URL"; then
              echo "第 $i 次请求成功。"
            else
              echo "错误：第 $i 次请求在3次重试后仍然失败。"
              exit 1
            fi
          done
          echo "---"
          echo "两次请求均已成功发送。"
      
      # 【已修复】恢复了“下载”脚本
      - name: Download RSS Feed
        run: |
          if [ -z "${{ vars.RSS_FEED_URL }}" ]; then
            echo "警告: RSS_FEED_URL 仓库变量未设置或为空，跳过下载。"
            echo "错误：必须设置 RSS_FEED_URL 才能继续！"
            exit 1
          else
            echo "正在从 ${{ vars.RSS_FEED_URL }} 下载 RSS Feed..."
            if wget -O rss.xml "${{ vars.RSS_FEED_URL }}" --timeout=30 --tries=3; then
              echo "RSS Feed 已成功下载到 rss.xml"
            else
              echo "错误: 下载 RSS Feed 失败。wget 返回错误码 $?。"
              exit 1
            fi
          fi
      
      - name: Create Today's Journal from Data
        run: |
          echo "正在创建今天的日报Markdown文件..."
          TODAY_DATE=$(TZ="Asia/Shanghai" date +%Y-%m-%d)
          NEW_FILE_PATH="src/daily/$TODAY_DATE.md"
          
          if [ -f "rss.xml" ]; then
            echo "找到 rss.xml 文件，正在处理..."
            echo "# $TODAY_DATE 日报" > $NEW_FILE_PATH
            echo "" >> $NEW_FILE_PATH
            echo "这是今天自动生成的日报内容。" >> $NEW_FILE_PATH
            echo "" >> $NEW_FILE_PATH
            echo "--- 从 rss.xml 提取的内容如下 ---" >> $NEW_FILE_PATH
            cat rss.xml >> $NEW_FILE_PATH
            echo "文件 $NEW_FILE_PATH 创建成功。"
          else
            echo "警告: 未找到 rss.xml 文件，无法创建今日日报。"
          fi

      - name: Generate SUMMARY.md
        run: |
          echo "正在生成 SUMMARY.md..."
          echo "# Summary" > src/SUMMARY.md
          echo "" >> src/SUMMARY.md
          echo "[Introduction](README.md)" >> src/SUMMARY.md
          echo "" >> src/SUMMARY.md
          echo "---" >> src/SUMMARY.md
          echo "" >> src/SUMMARY.md
          echo "## Daily Journals" >> src/SUMMARY.md
          
          find src/daily -type f -name "*.md" | sort -r | while read file; do
            TITLE=$(basename "$file" .md)
            echo "- [$TITLE]($(echo $file | sed 's|src/||'))" >> src/SUMMARY.md
          done
          
          echo "SUMMARY.md 生成完毕:"
          cat src/SUMMARY.md

      - name: Build the book
        run: |
          mkdir mdbook
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.21/mdbook-v0.4.21-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook
          ./mdbook/mdbook build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./book

      - name: Commit and push source changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/
          if [ -f "rss.xml" ]; then
            git add rss.xml
          fi
          if git diff --staged --quiet; then
            echo "没有源文件变更，无需提交。"
          else
            echo "检测到文件变更，正在提交..."
            git commit -m "docs: Auto-update daily journals and SUMMARY.md"
            git push
          fi

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
