name: Build Daily Journal

on:
  schedule:
    - cron: '0 23 * * *'   # UTC 23:00（北京时间 07:00）
  workflow_dispatch:

jobs:
  build-book:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'  # ✅ 改为 main

      # 1) 先生成当日 md
      - name: Generate Daily Markdown
        run: |
          set -e
          mkdir -p daily
          TODAY_DATE=$(TZ="Asia/Shanghai" date +%Y-%m-%d)
          FILE="daily/$TODAY_DATE.md"
          if [ -f "$FILE" ]; then
            echo "今日文件已存在：$FILE"
          else
            echo "生成新的日报文件：$FILE"
            {
              echo "# ${TODAY_DATE} 日刊"
              echo
              echo "（自动生成占位内容，后续由 Cloudflare Worker 读取并写入 KV / RSS）"
            } > "$FILE"
          fi
          echo "---- 列出 daily 目录 ----"
          ls -la daily | sed -n '1,200p'

      - name: Archive old notes
        run: |
          set -e
          echo "开始检查并归档旧的日刊..."
          LATEST_DAILY_FILE=$(find daily -type f -name "*.md" | sort -r | head -n 1 || true)
          if [ -z "$LATEST_DAILY_FILE" ]; then
            echo "在 'daily' 目录中没有找到任何 .md 文件，跳过归档。"
            exit 0
          fi
          LATEST_MONTH=$(basename "$LATEST_DAILY_FILE" .md | cut -d'-' -f1,2)
          echo "当前最新月份是: $LATEST_MONTH"
          for file in daily/*.md; do
            [ -e "$file" ] || continue
            FILE_MONTH=$(basename "$file" .md | cut -d'-' -f1,2)
            if [ "$FILE_MONTH" != "$LATEST_MONTH" ]; then
              TARGET_DIR="daily/$FILE_MONTH"
              mkdir -p "$TARGET_DIR"
              echo "归档: $file -> $TARGET_DIR/"
              mv "$file" "$TARGET_DIR/"
            fi
          done
          echo "归档完成。"

      # 2) 立刻提交：确保 Cloudflare 能拉到当日 md
      - name: Commit and push daily
        run: |
          set -e
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add daily/ today/ || true
          if git diff --staged --quiet; then
            echo "没有文件变更，无需提交（可能今天已生成过）。"
          else
            git commit -m "docs: 生成/归档日刊 ($(date -u))"
            git push
          fi

      # 3) 再触发 Cloudflare（允许失败不阻塞后续步骤）
      - name: Trigger RSS Data Write
        continue-on-error: true   # ✅ 或者在命令末尾加 || true
        run: |
          if [ -z "${{ vars.WRITE_RSS_URL }}" ]; then
            echo "警告: WRITE_RSS_URL 未设置，跳过此步骤。"
            exit 0
          fi
          TODAY_DATE=$(TZ="Asia/Shanghai" date +%Y-%m-%d)
          FULL_URL="${{ vars.WRITE_RSS_URL }}?date=$TODAY_DATE"
          echo "调用: $FULL_URL"
          # 允许失败但打印日志
          if curl -fsS --retry 3 --retry-delay 5 --retry-connrefused "$FULL_URL"; then
            echo "Cloudflare 写入成功。"
          else
            echo "Cloudflare 写入失败（可能是外部数据等原因），先不阻塞流程。"
          fi

      # 4)（可选）拉取 RSS 并二次提交
      - name: Download RSS Feed
        run: |
          if [ -z "${{ vars.RSS_FEED_URL }}" ]; then
            echo "RSS_FEED_URL 未设置，跳过下载。"
          else
            echo "下载 RSS: ${{ vars.RSS_FEED_URL }}"
            if wget -O rss.xml "${{ vars.RSS_FEED_URL }}" --timeout=30 --tries=3; then
              echo "RSS 已保存至 rss.xml"
            else
              echo "下载 RSS 失败（忽略）。"
            fi
          fi

      - name: Commit and push RSS (if any)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if [ -f "rss.xml" ]; then
            git add rss.xml
            if git diff --staged --quiet; then
              echo "rss.xml 无变化。"
            else
              git commit -m "chore: 更新 RSS ($(date -u))"
              git push
            fi
          else
            echo "没有 rss.xml，无需提交。"
