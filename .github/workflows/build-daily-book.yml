name: Auto Build AI Daily

on:
  workflow_dispatch: {}
  schedule:
    # 每天北京时间 08:10 运行（UTC 00:10）
    - cron: "10 0 * * *"

jobs:
  auto-daily:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run end-to-end pipeline (login → writeData → genAI → commit → writeRssData → rss)
        env:
          BASE_URL: ${{ vars.WORKER_BASE_URL }}
          USERNAME: ${{ secrets.WORKER_LOGIN_USERNAME }}
          PASSWORD: ${{ secrets.WORKER_LOGIN_PASSWORD }}
          FOLO_COOKIE_SECRET: ${{ secrets.CF_FOLO_COOKIE }}
          MAX_PER_TYPE: "6"
          TZ: Asia/Shanghai
        run: |
          node - <<'EOF'
          // -------- helpers ----------
          const BASE = process.env.BASE_URL.replace(/\/+$/, '');
          const DATE = new Date(Date.now() + 8*3600*1000).toISOString().slice(0,10); // GMT+8 yyyy-mm-dd
          const MAX_PER_TYPE = Number(process.env.MAX_PER_TYPE || 6);

          let cookieJar = '';
          const keepCookie = (res) => {
            const set = res.headers.get('set-cookie');
            if (set) {
              const one = set.split(',')[0];
              const m = one.match(/^[^;]+/);
              if (m) {
                cookieJar = cookieJar ? (cookieJar + '; ' + m[0]) : m[0];
              }
            }
            return cookieJar;
          };

          const fetchWithCookie = async (url, opts={}) => {
            const headers = Object.assign({}, opts.headers || {});
            if (cookieJar) headers['cookie'] = cookieJar;
            const res = await fetch(url, {...opts, headers});
            keepCookie(res);
            return res;
          };

          const ok = (res) => {
            if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText}`);
          };

          const form = (pairs) => {
            const fd = new FormData();
            for (const [k,v] of pairs) {
              if (Array.isArray(v)) v.forEach(x=>fd.append(k, x));
              else fd.append(k, v);
            }
            return fd;
          };

          console.log(`BASE: ${BASE}`);
          console.log(`DATE: ${DATE}`);

          // 1) login 获取 cookie
          console.log('🔐 Login ...');
          {
            const fd = new URLSearchParams();
            fd.set('username', process.env.USERNAME);
            fd.set('password', process.env.PASSWORD);
            const res = await fetch(`${BASE}/login`, {
              method: 'POST',
              headers: { 'content-type': 'application/x-www-form-urlencoded' },
              redirect: 'manual',
              body: fd.toString()
            });
            if (res.status !== 200 && res.status !== 302) {
              throw new Error(`Login failed: HTTP ${res.status}`);
            }
            keepCookie(res);
            if (!cookieJar) throw new Error('No cookie returned from login');
          }
          console.log('✅ Login OK');

          // 2) writeData
          console.log('📝 writeData ...');
          {
            const res = await fetchWithCookie(`${BASE}/writeData`, {
              method: 'POST',
              headers: { 'content-type': 'application/json' },
              body: JSON.stringify({ foloCookie: process.env.FOLO_COOKIE_SECRET })
            });
            ok(res);
            const j = await res.json().catch(()=>({}));
            console.log('writeData result:', j);
          }

          // 3) getContent
          console.log('📥 getContent ...');
          const all = {};
          {
            const res = await fetch(`${BASE}/getContent?date=${DATE}`);
            ok(res);
            const j = await res.json();
            for (const [k,v] of Object.entries(j)) {
              if (Array.isArray(v)) all[k] = v;
            }
            console.log('got categories:', Object.keys(all));
          }

          // 4) 构造 selectedItems
          console.log('🧩 build selectedItems ...');
          const selectedItems = [];
          for (const [type, arr] of Object.entries(all)) {
            for (const it of (arr || []).slice(0, MAX_PER_TYPE)) {
              if (it && (it.id !== undefined && it.id !== null)) {
                selectedItems.push(`${type}:${it.id}`);
              }
            }
          }
          if (selectedItems.length === 0) throw new Error('No items to select – writeData may have fetched nothing.');

          // 5) genAIContent（JSON 模式）
          console.log('🤖 genAIContent (JSON mode)...');
          let markdown = '';
          {
            const fd = form([
              ['date', DATE],
              ['selectedItems', selectedItems]
            ]);

            const res = await fetchWithCookie(`${BASE}/genAIContent?mode=json`, {
              method: 'POST',
              body: fd
            });
            ok(res);

            const j = await res.json().catch(() => null);
            if (!j || !j.markdown) {
              console.error('Full response:', j);
              throw new Error('genAIContent JSON response invalid or missing markdown field.');
            }

            markdown = j.markdown;
            if (!markdown.trim()) throw new Error('Empty markdown in genAIContent JSON result.');
          }
          console.log(`✅ genAIContent OK (JSON mode, length=${markdown.length})`);

          // 6) commitToGitHub
          console.log('⬆️ commitToGitHub ...');
          {
            const fd = form([
              ['date', DATE],
              ['daily_summary_markdown', markdown]
            ]);
            const res = await fetchWithCookie(`${BASE}/commitToGitHub`, {
              method: 'POST',
              body: fd
            });
            ok(res);
            const j = await res.json().catch(()=>({}));
            console.log('commitToGitHub result:', j);
          }

          // 7) writeRssData
          console.log('🪄 writeRssData ...');
          {
            const res = await fetch(`${BASE}/writeRssData?date=${DATE}`, { redirect: 'follow' });
            ok(res);
            const j = await res.json().catch(()=>({}));
            console.log('writeRssData result:', j.title || j.report_date || 'OK');
          }

          // 8) 下载 RSS 到本地
          console.log('⬇️ download RSS ...');
          {
            const res = await fetch(`${BASE}/rss?days=7`);
            ok(res);
            const xml = await res.text();
            const fs = await import('node:fs/promises');
            await fs.writeFile('rss.xml', xml, 'utf8');
          }

          console.log('🎉 All done for', DATE);
          EOF

      - name: Commit and push changes (rss.xml)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -f "rss.xml" ]; then
            git add rss.xml
          fi

          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "docs: auto-build AI Daily ($(date -u))"
            # 先拉取远程更新再推送，防止 fetch first 冲突
            git pull --rebase origin main || true
            git push origin main
          fi

      # ▼▼▼ [替换你原来的 "Deploy to GitHub Pages" 步骤] ▼▼▼
      - name: Deploy to GitHub Pages (Optimized)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📦 Installing build dependencies (marked)..."
          # 1. 安装一个专业的 Markdown -> HTML 解析器
          npm install marked

          echo "🚀 Building optimized website..."
          
          # 2. 创建 Node.js 脚本来构建网站
          # 我们不再使用 sed/echo，而是使用一个脚本来精细化地生成 HTML
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { marked } = require('marked'); // 引入 Markdown 解析器

          // --- 1. 定义 HTML 模板 ---
          // 我们使用 Pico.css (一个超轻量级、无需 class 的 CSS 框架) 来美化页面
          const picoCDN = 'https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css';

          const layout = (title, content) => `<!DOCTYPE html>
          <html lang="zh-CN" data-theme="light">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${title} - AI 资讯日报</title>
            <link rel="stylesheet" href="${picoCDN}">
            <style>
              body { padding-bottom: 3rem; }
              main { max-width: 960px; margin: 0 auto; }
              nav { display: flex; justify-content: space-between; align-items: center; }
              .daily-summary {
                border: 1px solid var(--pico-muted-border-color);
                padding: 1rem;
                border-radius: var(--pico-border-radius);
                margin-bottom: 1.5rem;
              }
              .daily-summary h2 { margin-bottom: 0.5rem; }
              .daily-summary p { margin-bottom: 0.5rem; }
              img { max-width: 100%; height: auto; } /* 确保图片响应式 */
              pre { background: #f6f8fa; padding: 10px; border-radius: 6px; overflow: auto; }
              code { background: #f6f8fa; padding: 2px 4px; border-radius: 4px; }
            </style>
          </head>
          <body>
            <main class="container">
              <nav>
                <strong><a href="../index.html" style="text-decoration: none;">🧠 AI 资讯日报</a></strong>
                <a href="../rss.xml" role="button" class="outline">RSS Feed</a>
              </nav>
              <hr>
              <article>
                <h1>${title}</h1>
                ${content}
              </article>
              <hr>
              <footer><small>Powered by AI Insight Daily</small></footer>
            </main>
          </body>
          </html>`;

          // --- 2. 准备目录 ---
          const dailyDir = 'daily';
          const publicDir = 'public';
          const publicDailyDir = path.join(publicDir, 'daily');
          if (fs.existsSync(publicDir)) fs.rmSync(publicDir, { recursive: true });
          fs.mkdirSync(publicDailyDir, { recursive: true });

          // --- 3. 读取所有日报 ---
          const files = fs.readdirSync(dailyDir)
            .filter(f => f.endsWith('.md'))
            .sort((a, b) => b.localeCompare(a)); // 按日期倒序

          let indexContent = '<h2>最近的日报</h2>';

          // --- 4. 遍历 Markdown 文件，生成详情页和首页摘要 ---
          const maxIndexItems = 7; // 首页最多显示多少篇
          for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const date = file.replace('.md', '');
            const mdPath = path.join(dailyDir, file);
            const htmlPath = path.join(publicDailyDir, `${date}.html`);
            
            const markdownContent = fs.readFileSync(mdPath, 'utf8');
            
            // 4a. [专业解析] 使用 marked 将完整 MD 转换为 HTML
            const htmlContent = marked.parse(markdownContent);
            
            // 4b. [生成详情页]
            const fullHtmlPage = layout(date, htmlContent);
            fs.writeFileSync(htmlPath, fullHtmlPage, 'utf8');

            // 4c. [生成首页条目] (仅限最近的几篇)
            if (i < maxIndexItems) {
              // 提取摘要 (这里简单用前 100 个字符，你可以用更复杂的方式)
              const summary = markdownContent.split('\n').slice(0, 5).join('\n').substring(0, 150) + '...';
              
              indexContent += `
              <section class="daily-summary">
                <h2><a href="daily/${date}.html">${date}</a></h2>
                <p>${marked.parse(summary)}</p>
                <a href="daily/${date}.html" role="button" class="secondary outline">阅读全文</a>
              </section>
              `;
            }
          }
          console.log(`✅ Generated ${files.length} daily pages.`);

          // --- 5. 生成主页 index.html ---
          const indexPage = layout('首页', indexContent);
          fs.writeFileSync(path.join(publicDir, 'index.html'), indexPage, 'utf8');
          
          // --- 6. 拷贝 RSS 文件 ---
          fs.copyFileSync('rss.xml', path.join(publicDir, 'rss.xml'));
          console.log('✅ Generated index.html and copied rss.xml.');
          
          EOF

          echo "📦 Deploying website to gh-pages..."

          # --- [下面的 Git 部署逻辑保持不变] ---
          cd public
          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Deploy optimized website $(date -u +'%Y-%m-%d %H:%M:%S')"
          git branch -M main
          git push --force "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" main:gh-pages
