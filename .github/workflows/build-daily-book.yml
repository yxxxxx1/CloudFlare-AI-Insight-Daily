name: Auto Build AI Daily & Deploy Pro Website

on:
  workflow_dispatch: {}
  schedule:
    # 每天北京时间 08:10 运行（UTC 00:10）
    - cron: "10 0 * * *"

jobs:
  auto-daily:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # [优化] 添加 fetch-depth: 0 以便 Hugo/Hextra 能获取所有 .md 历史
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # --- [第 1 部分：核心日报生成 - 逻辑修复] ---
      - name: Run end-to-end pipeline (login → writeData → genAI → writeFiles → rss)
        env:
          BASE_URL: ${{ vars.WORKER_BASE_URL }}
          USERNAME: ${{ secrets.WORKER_LOGIN_USERNAME }}
          PASSWORD: ${{ secrets.WORKER_LOGIN_PASSWORD }}
          FOLO_COOKIE_SECRET: ${{ secrets.CF_FOLO_COOKIE }}
          MAX_PER_TYPE: "6"
          TZ: Asia/Shanghai
        run: |
          node - <<'EOF'
          // [FINAL v22 修复] 切换到 async function main() 结构
          
          // -------- helpers ----------
          // [修复] 使用 require 代替 await import
          const fs = require('fs').promises;
          const path = require('path');
          
          const BASE = process.env.BASE_URL.replace(/\/+$/, '');
          const DATE = new Date(Date.now() + 8*3600*1000).toISOString().slice(0,10); // GMT+8 yyy-mm-dd
          const MAX_PER_TYPE = Number(process.env.MAX_PER_TYPE || 6);

          let cookieJar = '';
          const keepCookie = (res) => {
            const set = res.headers.get('set-cookie');
            if (set) {
              const one = set.split(',')[0];
              const m = one.match(/^[^;]+/);
              if (m) {
                cookieJar = cookieJar ? (cookieJar + '; ' + m[0]) : m[0];
              }
            }
            return cookieJar;
          };

          const fetchWithCookie = async (url, opts={}) => {
            const headers = Object.assign({}, opts.headers || {});
            if (cookieJar) headers['cookie'] = cookieJar;
            const res = await fetch(url, {...opts, headers});
            keepCookie(res);
            return res;
          };

          const ok = (res) => {
            if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText}`);
          };

          const form = (pairs) => {
            const fd = new FormData();
            for (const [k,v] of pairs) {
              if (Array.isArray(v)) v.forEach(x=>fd.append(k, x));
              else fd.append(k, v);
            }
            return fd;
          };
          
          // [FINAL v22 修复] 将所有逻辑放入 async main()
          async function main() {
            console.log(`BASE: ${BASE}`);
            console.log(`DATE: ${DATE}`);

            // 1) login 获取 cookie
            console.log('🔐 Login ...');
            {
              const fd = new URLSearchParams();
              fd.set('username', process.env.USERNAME);
              fd.set('password', process.env.PASSWORD);
              const res = await fetch(`${BASE}/login`, {
                method: 'POST',
                headers: { 'content-type': 'application/x-www-form-urlencoded' },
                redirect: 'manual',
                body: fd.toString()
              });
              if (res.status !== 200 && res.status !== 302) {
                throw new Error(`Login failed: HTTP ${res.status}`);
              }
              keepCookie(res);
              if (!cookieJar) throw new Error('No cookie returned from login');
            }
            console.log('✅ Login OK');

            // 2) writeData
            console.log('📝 writeData ...');
            {
              const res = await fetchWithCookie(`${BASE}/writeData`, {
                method: 'POST',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({ foloCookie: process.env.FOLO_COOKIE_SECRET })
              });
              ok(res);
              const j = await res.json().catch(()=>({}));
              console.log('writeData result:', j);
            }

            // 3) getContent
            console.log('📥 getContent ...');
            const all = {};
            {
              const res = await fetch(`${BASE}/getContent?date=${DATE}`);
              ok(res);
              const j = await res.json();
              for (const [k,v] of Object.entries(j)) {
                if (Array.isArray(v)) all[k] = v;
              }
              console.log('got categories:', Object.keys(all));
            }

            // 4) 构造 selectedItems
            console.log('🧩 build selectedItems ...');
            const selectedItems = [];
            for (const [type, arr] of Object.entries(all)) {
              for (const it of (arr || []).slice(0, MAX_PER_TYPE)) {
                if (it && (it.id !== undefined && it.id !== null)) {
                  selectedItems.push(`${type}:${it.id}`);
                }
              }
            }
            if (selectedItems.length === 0) throw new Error('No items to select – writeData may have fetched nothing.');

            // 5) genAIContent（JSON 模式）
            console.log('🤖 genAIContent (JSON mode)...');
            let markdown = '';
            {
              const fd = form([
                ['date', DATE],
                ['selectedItems', selectedItems]
              ]);

              const res = await fetchWithCookie(`${BASE}/genAIContent?mode=json`, {
                method: 'POST',
                body: fd
              });
              ok(res);

              const j = await res.json().catch(() => null);
              if (!j || !j.markdown) {
                console.error('Full response:', j);
                throw new Error('genAIContent JSON response invalid or missing markdown field.');
              }

              markdown = j.markdown;
              if (!markdown.trim()) throw new Error('Empty markdown in genAIContent JSON result.');
            }
            console.log(`✅ genAIContent OK (JSON mode, length=${markdown.length})`);

            // 6) [FINAL v19 逻辑修复] 在本地写入 .md 文件 (并添加 Hugo Front Matter)
            console.log('✍️ Writing .md file locally with Hugo Front Matter...');
            {
              // [修复] 构造 Hugo Front Matter
              // 我们使用 DATE (e.g., "2025-01-01") 作为 title 和 date
              const frontMatter = `---
title: "AI 日报 ${DATE}"
date: ${DATE}
---

`;
              
              const fileContent = frontMatter + markdown; // 将 Front Matter 拼接到 Markdown 内容前

              const dailyDir = path.resolve(process.cwd(), 'daily');
              await fs.mkdir(dailyDir, { recursive: true }); // 确保 'daily' 目录存在
              const filePath = path.join(dailyDir, `${DATE}.md`);
              await fs.writeFile(filePath, fileContent, 'utf8'); // 写入包含 Front Matter 的完整内容
              console.log(`✅ File written to ${filePath}`);
            }

            // 7) writeRssData (原第7步)
            console.log('🪄 writeRssData ...');
            {
              const res = await fetch(`${BASE}/writeRssData?date=${DATE}`, { redirect: 'follow' });
              ok(res);
              const j = await res.json().catch(()=>({}));
              console.log('writeRssData result:', j.title || j.report_date || 'OK');
            }

            // 8) 下载 RSS 到本地 (原第8步)
            console.log('⬇️ download RSS ...');
            {
              const res = await fetch(`${BASE}/rss?days=7`);
              ok(res);
              const xml = await res.text();
              await fs.writeFile('rss.xml', xml, 'utf8');
              console.log('✅ File written to rss.xml');
            }

            console.log('🎉 All done for', DATE);
          }
          
          // [FINAL v22 修复] 执行 main 函数并处理错误
          main().catch(e => {
            console.error(e);
            process.exit(1);
          });
  EOF

      # --- [第 2 部分：提交 RSS 和 .md 文件 - 逻辑修复] ---
      - name: Commit and push changes (rss.xml and daily/*.md)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # [FINAL v19 修复] 添加所有新文件 (rss.xml 和 daily/YYYY-MM-DD.md)
          git add rss.xml
          git add daily/

          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "docs: auto-build AI Daily ($(date -u))"
            # [修复] 拉取远程更新现在是安全的
            git pull --rebase origin main || true
            git push origin main
          fi

      # --- [第 3 部分：构建专业网站 - 替换原有的部署步骤] ---
      - name: Install Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          # [最终修复] 必须使用 extended 版
          extended: true 

      # --- [FINAL v19 修复] 删除了你 baseline 中无效的 "Setup Hugo Theme" 步骤 ---
      
      - name: Build Website with Hugo
        run: |
          echo "Initializing Hugo Module..."
          # 使用 GITHUB_REPOSITORY (例如 "yxxxxx1/CloudFlare-AI-Insight-Daily") 作为模块名
          hugo mod init github.com/${{ github.REPOSITORY }}

          echo "Creating Hugo configuration..."
          # 动态创建 Hugo 配置文件
          
          # ▼▼▼ [重要] 请将 baseURL 修改为你的 GitHub Pages 网址 ▼▼▼
          cat << EOF > hugo.toml
          baseURL = "https://yxxxxx1.github.io/CloudFlare-AI-Insight-Daily/"
          languageCode = "zh-cn"
          title = "AI 资讯日报"
          
          # [最终修复] 明确导入 Hextra 主题
          [module]
            [[module.imports]]
              path = "github.com/imfing/hextra"

          # 允许首页渲染 HTML 和模板逻辑
          [outputs]
            home = ["HTML", "RSS", "JSON"]

          # Hextra 主题的配置
          [params]
            [params.theme]
              # 开启暗黑/明亮模式自动切换
              mode = "auto"
              toggle = true
          
          # 配置菜单
          [menu]
            [[menu.main]]
              name = "首页"
              url = "/"
              weight = 1
            [[menu.main]]
              name = "日报"  # 日报目录链接
              url = "/daily"
              weight = 2
            [[menu.main]]
              name = "RSS"
              url = "/rss.xml"
              weight = 3
            [[menu.main]]
              name = "GitHub"
              url = "https://github.com/yxxxxx1/CloudFlare-AI-Insight-Daily"
              weight = 4
          EOF

          echo "Configuring Git for Hugo Modules..."
          # [最终修复] 解决 'terminal prompts disabled' 错误
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

          echo "Tidying Hugo modules (Hextra)..."
          # 运行 'hugo mod tidy' 会自动下载 hextra 及其所有依赖（包括 shortcodes）
          hugo mod tidy

          echo "Organizing content for Hugo..."
          # 1. 把所有日报 .md 移动到 Hugo 的 content 目录
          mkdir -p content/daily
          # [重要] 确保 daily 目录存在，否则 cp 会失败
          if [ -d "daily" ]; then
            cp -r daily/*.md content/daily/
          else
            echo "Warning: 'daily' directory not found. No posts to build."
          fi

          # 2. 把 rss.xml 移动到 static 目录
          mkdir -p static
          if [ -f "rss.xml" ]; then
            cp rss.xml static/
          fi

          # 3. 创建一个动态首页 (从 .md 改为 .html 来执行模板)
          # [v17 YAML 修复] 转义所有 {{ 和 }}
          cat << EOF > content/_index.html
          ---
          title: "AI 资讯日报"
          type: "page"
          ---
          
          <div class="mt-6">
            欢迎来到 AI 资讯日报。
            <br>
            这里每日为您精选 AI 领域的最新动态，包括行业新闻、热门开源项目、前沿学术论文和科技大V社交媒体言论。
          </div>

          <h2 class="mt-8">最近日报</h2>

          ${{ '{{' }}< list-container >}} <!-- [最终修复] 移除了 'hextra/' 前缀 -->
          ${{ '{{' }}/* 查询 daily 分区中的所有页面，按文件名（即日期）倒序，取前 7 篇 */}}
          ${{ '{{' }} range first 7 (where .Site.RegularPages "Section" "daily" | sort .File.Path ".md" "desc") }}
            <a href="${{ '{{' }} .RelPermalink }}" class="flex !no-underline my-4">
              <div class="flex-1">
                <div class="font-semibold">${{ '{{' }} .Title }}</div>
                <div class="text-sm text-gray-500 dark:text-gray-400">
                  ${{ '{{' }} .Date.Format "2006-01-02" }}
                </div>
              </div>
            </a>
          ${{ '{{' }} end }}
          ${{ '{{' }}< /list-container >}} <!-- [最终修复] 移除了 'hextra/' 前缀 -->

          <a href="/daily" class="mt-4 inline-block">查看所有日报 →</a>
          EOF

          # 4. 为 /daily 列表页创建一个 _index.html
          # [v17 YAML 修复] 转义所有 {{ 和 }}
          cat << EOF > content/daily/_index.html
          ---
          title: "所有日报"
          type: "page"
          ---

          <h1>所有日报</h1>

          ${{ '{{' }}< list-container >}} <!-- [最终修复] 移除了 'hextra/' 前缀 -->
          ${{ '{{' }}/* 遍历 .Pages (即 daily 目录下的所有页面), 按日期倒序 */}}
          ${{ '{{' }} range .Pages.ByDate.Reverse }}
            <a href="${{ '{{' }} .RelPermalink }}" class="flex !no-underline my-4">
              <div class="flex-1">
                <div class="font-semibold">${{ '{{' }} .Title }}</div>
                <div class="text-sm text-gray-500 dark:text-gray-400">
                  ${{ '{{' }} .Date.Format "2006-01-02" }}
                </div>
              </div>
            </a>
          ${{ '{{' }} end }}
          ${{ '{{' }}< /list-container >}} <!-- [最终修复] 移除了 'hextra/' 前缀 -->
          
          echo "Running Hugo build..."
          # 5. 运行 Hugo 构建
          hugo

      # --- [第 4 部分：部署到 gh-pages 分支 - 你的原始代码，完全不变] ---
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # 指定 Hugo 的输出目录
          publish_dir: ./public
          # 确保推送到 gh-pages 分支
          publish_branch: gh-pages
          # 每次都强制推送，覆盖旧的构建
          force_orphan: true
