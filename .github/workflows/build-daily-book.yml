
name: Auto Build AI Daily

on:
  workflow_dispatch: {}
  schedule:
    # 每天北京时间 08:10 运行（UTC 00:10）
    - cron: "10 0 * * *"

jobs:
  auto-daily:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run end-to-end pipeline (login → writeData → genAI → commit → writeRssData → rss)
        env:
          BASE_URL: ${{ vars.WORKER_BASE_URL }}
          USERNAME: ${{ secrets.WORKER_LOGIN_USERNAME }}
          PASSWORD: ${{ secrets.WORKER_LOGIN_PASSWORD }}
          FOLO_COOKIE_SECRET: ${{ secrets.CF_FOLO_COOKIE }}
          MAX_PER_TYPE: "6"
          TZ: Asia/Shanghai
        run: |
          node - <<'EOF'
          // -------- helpers ----------
          const BASE = process.env.BASE_URL.replace(/\/+$/, '');
          const DATE = new Date(Date.now() + 8*3600*1000).toISOString().slice(0,10); // GMT+8 yyyy-mm-dd
          const MAX_PER_TYPE = Number(process.env.MAX_PER_TYPE || 6);

          let cookieJar = '';
          const keepCookie = (res) => {
            const set = res.headers.get('set-cookie');
            if (set) {
              const one = set.split(',')[0];
              const m = one.match(/^[^;]+/);
              if (m) {
                cookieJar = cookieJar ? (cookieJar + '; ' + m[0]) : m[0];
              }
            }
            return cookieJar;
          };

          const fetchWithCookie = async (url, opts={}) => {
            const headers = Object.assign({}, opts.headers || {});
            if (cookieJar) headers['cookie'] = cookieJar;
            const res = await fetch(url, {...opts, headers});
            keepCookie(res);
            return res;
          };

          const ok = (res) => {
            if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText}`);
          };

          const form = (pairs) => {
            const fd = new FormData();
            for (const [k,v] of pairs) {
              if (Array.isArray(v)) v.forEach(x=>fd.append(k, x));
              else fd.append(k, v);
            }
            return fd;
          };

          console.log(`BASE: ${BASE}`);
          console.log(`DATE: ${DATE}`);

          // 1) login 获取 cookie
          console.log('🔐 Login ...');
          {
            const fd = new URLSearchParams();
            fd.set('username', process.env.USERNAME);
            fd.set('password', process.env.PASSWORD);
            const res = await fetch(`${BASE}/login`, {
              method: 'POST',
              headers: { 'content-type': 'application/x-www-form-urlencoded' },
              redirect: 'manual',
              body: fd.toString()
            });
            if (res.status !== 200 && res.status !== 302) {
              throw new Error(`Login failed: HTTP ${res.status}`);
            }
            keepCookie(res);
            if (!cookieJar) throw new Error('No cookie returned from login');
          }
          console.log('✅ Login OK');

          // 2) writeData
          console.log('📝 writeData ...');
          {
            const res = await fetchWithCookie(`${BASE}/writeData`, {
              method: 'POST',
              headers: { 'content-type': 'application/json' },
              body: JSON.stringify({ foloCookie: process.env.FOLO_COOKIE_SECRET })
            });
            ok(res);
            const j = await res.json().catch(()=>({}));
            console.log('writeData result:', j);
          }

          // 3) getContent
          console.log('📥 getContent ...');
          const all = {};
          {
            const res = await fetch(`${BASE}/getContent?date=${DATE}`);
            ok(res);
            const j = await res.json();
            for (const [k,v] of Object.entries(j)) {
              if (Array.isArray(v)) all[k] = v;
            }
            console.log('got categories:', Object.keys(all));
          }

          // 4) 构造 selectedItems
          console.log('🧩 build selectedItems ...');
          const selectedItems = [];
          for (const [type, arr] of Object.entries(all)) {
            for (const it of (arr || []).slice(0, MAX_PER_TYPE)) {
              if (it && (it.id !== undefined && it.id !== null)) {
                selectedItems.push(`${type}:${it.id}`);
              }
            }
          }
          if (selectedItems.length === 0) throw new Error('No items to select – writeData may have fetched nothing.');

          // 5) genAIContent（JSON 模式）
          console.log('🤖 genAIContent (JSON mode)...');
          let markdown = '';
          {
            const fd = form([
              ['date', DATE],
              ['selectedItems', selectedItems]
            ]);

            const res = await fetchWithCookie(`${BASE}/genAIContent?mode=json`, {
              method: 'POST',
              body: fd
            });
            ok(res);

            const j = await res.json().catch(() => null);
            if (!j || !j.markdown) {
              console.error('Full response:', j);
              throw new Error('genAIContent JSON response invalid or missing markdown field.');
            }

            markdown = j.markdown;
            if (!markdown.trim()) throw new Error('Empty markdown in genAIContent JSON result.');
          }
          console.log(`✅ genAIContent OK (JSON mode, length=${markdown.length})`);

          // 6) commitToGitHub
          console.log('⬆️ commitToGitHub ...');
          {
            const fd = form([
              ['date', DATE],
              ['daily_summary_markdown', markdown]
            ]);
            const res = await fetchWithCookie(`${BASE}/commitToGitHub`, {
              method: 'POST',
              body: fd
            });
            ok(res);
            const j = await res.json().catch(()=>({}));
            console.log('commitToGitHub result:', j);
          }

          // 7) writeRssData
          console.log('🪄 writeRssData ...');
          {
            const res = await fetch(`${BASE}/writeRssData?date=${DATE}`, { redirect: 'follow' });
            ok(res);
            const j = await res.json().catch(()=>({}));
            console.log('writeRssData result:', j.title || j.report_date || 'OK');
          }

          // 8) 下载 RSS 到本地
          console.log('⬇️ download RSS ...');
          {
            const res = await fetch(`${BASE}/rss?days=7`);
            ok(res);
            const xml = await res.text();
            const fs = await import('node:fs/promises');
            await fs.writeFile('rss.xml', xml, 'utf8');
          }

          console.log('🎉 All done for', DATE);
          EOF

      - name: Commit and push changes (rss.xml)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -f "rss.xml" ]; then
            git add rss.xml
          fi

          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "docs: auto-build AI Daily ($(date -u))"
            git push --force origin main
          fi

      - name: Deploy to GitHub Pages (gh-pages branch)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📦 Building website structure..."

          # 1️⃣ 创建 public 目录
          mkdir -p public/daily

          # 2️⃣ 将 markdown 转成 HTML
          for f in daily/*.md; do
            [ -f "$f" ] || continue
            name=$(basename "$f" .md)
            html="public/daily/${name}.html"
            echo "<html><head><meta charset='utf-8'><title>${name} - AI Insight Daily</title>
            <style>
              body{font-family:sans-serif;max-width:800px;margin:40px auto;line-height:1.6;}
              h1,h2,h3{color:#333;}
              a{color:#0366d6;text-decoration:none;}
              a:hover{text-decoration:underline;}
              pre{background:#f6f8fa;padding:10px;border-radius:6px;overflow:auto;}
              code{background:#f6f8fa;padding:2px 4px;border-radius:4px;}
            </style>
            </head><body>
            <h1>AI Insight Daily - ${name}</h1>
            <p><a href='../index.html'>← 返回首页</a></p>
            <hr>" > "$html"
            # 转换 markdown -> html 简易版
            cat "$f" | sed 's/^# \(.*\)$/<h2>\1<\/h2>/; s/^## \(.*\)$/<h3>\1<\/h3>/; s/^### \(.*\)$/<h4>\1<\/h4>/; s/^\(.*\)$/<p>\1<\/p>/' >> "$html"
            echo "</body></html>" >> "$html"
          done

          # 3️⃣ 拷贝 RSS
          cp rss.xml public/rss.xml || true

          # 4️⃣ 生成主页 index.html
          echo "<html><head><meta charset='utf-8'><title>AI Insight Daily</title>
          <style>
            body{font-family:sans-serif;max-width:800px;margin:40px auto;line-height:1.6;}
            h1{color:#222;}
            a{color:#0366d6;text-decoration:none;}
            a:hover{text-decoration:underline;}
          </style>
          </head><body>
          <h1>AI Insight Daily 🧠</h1>
          <p>最近更新的日报：</p><ul>" > public/index.html

          for f in $(ls -t daily/*.md | head -n 7); do
            name=$(basename "$f" .md)
            echo "<li><a href='daily/${name}.html'>${name}</a></li>" >> public/index.html
          done

          echo "</ul><hr><p><a href='rss.xml'>RSS Feed</a></p></body></html>" >> public/index.html

          # 5️⃣ 推送到 gh-pages
          cd public
          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Deploy website $(date -u +'%Y-%m-%d %H:%M:%S')"
          git branch -M main
          git push --force "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" main:gh-pages


